package mintcode.com.workhub_im.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import mintcode.com.workhub_im.db.UserDetailEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "USER_DETAIL_ENTITY".
*/
public class UserDetailEntityDao extends AbstractDao<UserDetailEntity, Long> {

    public static final String TABLENAME = "USER_DETAIL_ENTITY";

    /**
     * Properties of entity UserDetailEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property ShowId = new Property(1, String.class, "showId", false, "SHOW_ID");
        public final static Property Name = new Property(2, String.class, "name", false, "NAME");
        public final static Property TrueName = new Property(3, String.class, "trueName", false, "TRUE_NAME");
        public final static Property TrueNameC = new Property(4, String.class, "trueNameC", false, "TRUE_NAME_C");
        public final static Property Mail = new Property(5, String.class, "mail", false, "MAIL");
        public final static Property Status = new Property(6, String.class, "status", false, "STATUS");
        public final static Property Mobile = new Property(7, String.class, "mobile", false, "MOBILE");
        public final static Property Job = new Property(8, String.class, "job", false, "JOB");
        public final static Property Number = new Property(9, String.class, "number", false, "NUMBER");
        public final static Property Sort = new Property(10, String.class, "sort", false, "SORT");
        public final static Property LastLoginTime = new Property(11, String.class, "lastLoginTime", false, "LAST_LOGIN_TIME");
        public final static Property LastLoginToken = new Property(12, String.class, "lastLoginToken", false, "LAST_LOGIN_TOKEN");
        public final static Property IsAdmin = new Property(13, String.class, "isAdmin", false, "IS_ADMIN");
        public final static Property CShowId = new Property(14, String.class, "cShowId", false, "C_SHOW_ID");
        public final static Property CreateUser = new Property(15, String.class, "createUser", false, "CREATE_USER");
        public final static Property CreateTime = new Property(16, String.class, "createTime", false, "CREATE_TIME");
        public final static Property DName = new Property(17, String.class, "dName", false, "D_NAME");
        public final static Property DeptId = new Property(18, String.class, "deptId", false, "DEPT_ID");
        public final static Property ParentShowId = new Property(19, String.class, "parentShowId", false, "PARENT_SHOW_ID");
        public final static Property PathName = new Property(20, String.class, "pathName", false, "PATH_NAME");
        public final static Property Hira = new Property(21, String.class, "hira", false, "HIRA");
        public final static Property Telephone = new Property(22, String.class, "telephone", false, "TELEPHONE");
        public final static Property OtherField = new Property(23, String.class, "otherField", false, "OTHER_FIELD");
        public final static Property LaunchrId = new Property(24, Long.class, "launchrId", false, "LAUNCHR_ID");
    };


    public UserDetailEntityDao(DaoConfig config) {
        super(config);
    }
    
    public UserDetailEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"USER_DETAIL_ENTITY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"SHOW_ID\" TEXT," + // 1: showId
                "\"NAME\" TEXT," + // 2: name
                "\"TRUE_NAME\" TEXT," + // 3: trueName
                "\"TRUE_NAME_C\" TEXT," + // 4: trueNameC
                "\"MAIL\" TEXT," + // 5: mail
                "\"STATUS\" TEXT," + // 6: status
                "\"MOBILE\" TEXT," + // 7: mobile
                "\"JOB\" TEXT," + // 8: job
                "\"NUMBER\" TEXT," + // 9: number
                "\"SORT\" TEXT," + // 10: sort
                "\"LAST_LOGIN_TIME\" TEXT," + // 11: lastLoginTime
                "\"LAST_LOGIN_TOKEN\" TEXT," + // 12: lastLoginToken
                "\"IS_ADMIN\" TEXT," + // 13: isAdmin
                "\"C_SHOW_ID\" TEXT," + // 14: cShowId
                "\"CREATE_USER\" TEXT," + // 15: createUser
                "\"CREATE_TIME\" TEXT," + // 16: createTime
                "\"D_NAME\" TEXT," + // 17: dName
                "\"DEPT_ID\" TEXT," + // 18: deptId
                "\"PARENT_SHOW_ID\" TEXT," + // 19: parentShowId
                "\"PATH_NAME\" TEXT," + // 20: pathName
                "\"HIRA\" TEXT," + // 21: hira
                "\"TELEPHONE\" TEXT," + // 22: telephone
                "\"OTHER_FIELD\" TEXT," + // 23: otherField
                "\"LAUNCHR_ID\" INTEGER);"); // 24: launchrId
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"USER_DETAIL_ENTITY\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, UserDetailEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String showId = entity.getShowId();
        if (showId != null) {
            stmt.bindString(2, showId);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
 
        String trueName = entity.getTrueName();
        if (trueName != null) {
            stmt.bindString(4, trueName);
        }
 
        String trueNameC = entity.getTrueNameC();
        if (trueNameC != null) {
            stmt.bindString(5, trueNameC);
        }
 
        String mail = entity.getMail();
        if (mail != null) {
            stmt.bindString(6, mail);
        }
 
        String status = entity.getStatus();
        if (status != null) {
            stmt.bindString(7, status);
        }
 
        String mobile = entity.getMobile();
        if (mobile != null) {
            stmt.bindString(8, mobile);
        }
 
        String job = entity.getJob();
        if (job != null) {
            stmt.bindString(9, job);
        }
 
        String number = entity.getNumber();
        if (number != null) {
            stmt.bindString(10, number);
        }
 
        String sort = entity.getSort();
        if (sort != null) {
            stmt.bindString(11, sort);
        }
 
        String lastLoginTime = entity.getLastLoginTime();
        if (lastLoginTime != null) {
            stmt.bindString(12, lastLoginTime);
        }
 
        String lastLoginToken = entity.getLastLoginToken();
        if (lastLoginToken != null) {
            stmt.bindString(13, lastLoginToken);
        }
 
        String isAdmin = entity.getIsAdmin();
        if (isAdmin != null) {
            stmt.bindString(14, isAdmin);
        }
 
        String cShowId = entity.getCShowId();
        if (cShowId != null) {
            stmt.bindString(15, cShowId);
        }
 
        String createUser = entity.getCreateUser();
        if (createUser != null) {
            stmt.bindString(16, createUser);
        }
 
        String createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindString(17, createTime);
        }
 
        String dName = entity.getDName();
        if (dName != null) {
            stmt.bindString(18, dName);
        }
 
        String deptId = entity.getDeptId();
        if (deptId != null) {
            stmt.bindString(19, deptId);
        }
 
        String parentShowId = entity.getParentShowId();
        if (parentShowId != null) {
            stmt.bindString(20, parentShowId);
        }
 
        String pathName = entity.getPathName();
        if (pathName != null) {
            stmt.bindString(21, pathName);
        }
 
        String hira = entity.getHira();
        if (hira != null) {
            stmt.bindString(22, hira);
        }
 
        String telephone = entity.getTelephone();
        if (telephone != null) {
            stmt.bindString(23, telephone);
        }
 
        String otherField = entity.getOtherField();
        if (otherField != null) {
            stmt.bindString(24, otherField);
        }
 
        Long launchrId = entity.getLaunchrId();
        if (launchrId != null) {
            stmt.bindLong(25, launchrId);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public UserDetailEntity readEntity(Cursor cursor, int offset) {
        UserDetailEntity entity = new UserDetailEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // showId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // name
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // trueName
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // trueNameC
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // mail
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // status
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // mobile
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // job
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // number
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // sort
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // lastLoginTime
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // lastLoginToken
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // isAdmin
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // cShowId
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // createUser
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // createTime
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // dName
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // deptId
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // parentShowId
            cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20), // pathName
            cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21), // hira
            cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22), // telephone
            cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23), // otherField
            cursor.isNull(offset + 24) ? null : cursor.getLong(offset + 24) // launchrId
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, UserDetailEntity entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setShowId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setTrueName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setTrueNameC(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setMail(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setStatus(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setMobile(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setJob(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setNumber(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setSort(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setLastLoginTime(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setLastLoginToken(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setIsAdmin(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setCShowId(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setCreateUser(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setCreateTime(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setDName(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setDeptId(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setParentShowId(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setPathName(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
        entity.setHira(cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21));
        entity.setTelephone(cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22));
        entity.setOtherField(cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23));
        entity.setLaunchrId(cursor.isNull(offset + 24) ? null : cursor.getLong(offset + 24));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(UserDetailEntity entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(UserDetailEntity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
