package mintcode.com.workhub_im.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import mintcode.com.workhub_im.db.SessionItem;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SESSION_ITEM".
*/
public class SessionItemDao extends AbstractDao<SessionItem, Long> {

    public static final String TABLENAME = "SESSION_ITEM";

    /**
     * Properties of entity SessionItem.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property UserName = new Property(1, String.class, "userName", false, "USER_NAME");
        public final static Property NickName = new Property(2, String.class, "nickName", false, "NICK_NAME");
        public final static Property OppositeName = new Property(3, String.class, "oppositeName", false, "OPPOSITE_NAME");
        public final static Property Content = new Property(4, String.class, "content", false, "CONTENT");
        public final static Property Time = new Property(5, Long.class, "time", false, "TIME");
        public final static Property Info = new Property(6, String.class, "info", false, "INFO");
        public final static Property Unread = new Property(7, Integer.class, "unread", false, "UNREAD");
        public final static Property ChatRoom = new Property(8, Integer.class, "chatRoom", false, "CHAT_ROOM");
        public final static Property Sort = new Property(9, Integer.class, "sort", false, "SORT");
        public final static Property Recieve = new Property(10, Integer.class, "recieve", false, "RECIEVE");
        public final static Property Drafts = new Property(11, Integer.class, "drafts", false, "DRAFTS");
        public final static Property ClientMsgId = new Property(12, Long.class, "clientMsgId", false, "CLIENT_MSG_ID");
        public final static Property SessionTime = new Property(13, Long.class, "sessionTime", false, "SESSION_TIME");
    };


    public SessionItemDao(DaoConfig config) {
        super(config);
    }
    
    public SessionItemDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SESSION_ITEM\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"USER_NAME\" TEXT," + // 1: userName
                "\"NICK_NAME\" TEXT," + // 2: nickName
                "\"OPPOSITE_NAME\" TEXT," + // 3: oppositeName
                "\"CONTENT\" TEXT," + // 4: content
                "\"TIME\" INTEGER," + // 5: time
                "\"INFO\" TEXT," + // 6: info
                "\"UNREAD\" INTEGER," + // 7: unread
                "\"CHAT_ROOM\" INTEGER," + // 8: chatRoom
                "\"SORT\" INTEGER," + // 9: sort
                "\"RECIEVE\" INTEGER," + // 10: recieve
                "\"DRAFTS\" INTEGER," + // 11: drafts
                "\"CLIENT_MSG_ID\" INTEGER," + // 12: clientMsgId
                "\"SESSION_TIME\" INTEGER);"); // 13: sessionTime
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SESSION_ITEM\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, SessionItem entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String userName = entity.getUserName();
        if (userName != null) {
            stmt.bindString(2, userName);
        }
 
        String nickName = entity.getNickName();
        if (nickName != null) {
            stmt.bindString(3, nickName);
        }
 
        String oppositeName = entity.getOppositeName();
        if (oppositeName != null) {
            stmt.bindString(4, oppositeName);
        }
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(5, content);
        }
 
        Long time = entity.getTime();
        if (time != null) {
            stmt.bindLong(6, time);
        }
 
        String info = entity.getInfo();
        if (info != null) {
            stmt.bindString(7, info);
        }
 
        Integer unread = entity.getUnread();
        if (unread != null) {
            stmt.bindLong(8, unread);
        }
 
        Integer chatRoom = entity.getChatRoom();
        if (chatRoom != null) {
            stmt.bindLong(9, chatRoom);
        }
 
        Integer sort = entity.getSort();
        if (sort != null) {
            stmt.bindLong(10, sort);
        }
 
        Integer recieve = entity.getRecieve();
        if (recieve != null) {
            stmt.bindLong(11, recieve);
        }
 
        Integer drafts = entity.getDrafts();
        if (drafts != null) {
            stmt.bindLong(12, drafts);
        }
 
        Long clientMsgId = entity.getClientMsgId();
        if (clientMsgId != null) {
            stmt.bindLong(13, clientMsgId);
        }
 
        Long sessionTime = entity.getSessionTime();
        if (sessionTime != null) {
            stmt.bindLong(14, sessionTime);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public SessionItem readEntity(Cursor cursor, int offset) {
        SessionItem entity = new SessionItem( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // userName
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // nickName
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // oppositeName
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // content
            cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5), // time
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // info
            cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7), // unread
            cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8), // chatRoom
            cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9), // sort
            cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10), // recieve
            cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11), // drafts
            cursor.isNull(offset + 12) ? null : cursor.getLong(offset + 12), // clientMsgId
            cursor.isNull(offset + 13) ? null : cursor.getLong(offset + 13) // sessionTime
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, SessionItem entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUserName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setNickName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setOppositeName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setContent(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setTime(cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5));
        entity.setInfo(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setUnread(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
        entity.setChatRoom(cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8));
        entity.setSort(cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9));
        entity.setRecieve(cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10));
        entity.setDrafts(cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11));
        entity.setClientMsgId(cursor.isNull(offset + 12) ? null : cursor.getLong(offset + 12));
        entity.setSessionTime(cursor.isNull(offset + 13) ? null : cursor.getLong(offset + 13));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(SessionItem entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(SessionItem entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
