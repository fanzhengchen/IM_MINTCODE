package mintcode.com.workhub_im.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import mintcode.com.workhub_im.db.DepartmentEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DEPARTMENT_ENTITY".
*/
public class DepartmentEntityDao extends AbstractDao<DepartmentEntity, Long> {

    public static final String TABLENAME = "DEPARTMENT_ENTITY";

    /**
     * Properties of entity DepartmentEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property ShowId = new Property(1, String.class, "showId", false, "SHOW_ID");
        public final static Property CShowId = new Property(2, String.class, "cShowId", false, "C_SHOW_ID");
        public final static Property DName = new Property(3, String.class, "dName", false, "D_NAME");
        public final static Property DLevel = new Property(4, String.class, "dLevel", false, "D_LEVEL");
        public final static Property DParentName = new Property(5, String.class, "dParentName", false, "D_PARENT_NAME");
        public final static Property DParentShowId = new Property(6, String.class, "dParentShowId", false, "D_PARENT_SHOW_ID");
        public final static Property CName = new Property(7, String.class, "cName", false, "C_NAME");
        public final static Property CreateUserName = new Property(8, String.class, "createUserName", false, "CREATE_USER_NAME");
        public final static Property DSort = new Property(9, Integer.class, "dSort", false, "D_SORT");
        public final static Property DAvailableCount = new Property(10, Integer.class, "dAvailableCount", false, "D_AVAILABLE_COUNT");
        public final static Property DUnAvailableCount = new Property(11, Integer.class, "dUnAvailableCount", false, "D_UN_AVAILABLE_COUNT");
        public final static Property ChildDeptCount = new Property(12, Integer.class, "childDeptCount", false, "CHILD_DEPT_COUNT");
        public final static Property ExtendField = new Property(13, String.class, "extendField", false, "EXTEND_FIELD");
        public final static Property OtherField = new Property(14, String.class, "otherField", false, "OTHER_FIELD");
    };


    public DepartmentEntityDao(DaoConfig config) {
        super(config);
    }
    
    public DepartmentEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DEPARTMENT_ENTITY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"SHOW_ID\" TEXT," + // 1: showId
                "\"C_SHOW_ID\" TEXT," + // 2: cShowId
                "\"D_NAME\" TEXT," + // 3: dName
                "\"D_LEVEL\" TEXT," + // 4: dLevel
                "\"D_PARENT_NAME\" TEXT," + // 5: dParentName
                "\"D_PARENT_SHOW_ID\" TEXT," + // 6: dParentShowId
                "\"C_NAME\" TEXT," + // 7: cName
                "\"CREATE_USER_NAME\" TEXT," + // 8: createUserName
                "\"D_SORT\" INTEGER," + // 9: dSort
                "\"D_AVAILABLE_COUNT\" INTEGER," + // 10: dAvailableCount
                "\"D_UN_AVAILABLE_COUNT\" INTEGER," + // 11: dUnAvailableCount
                "\"CHILD_DEPT_COUNT\" INTEGER," + // 12: childDeptCount
                "\"EXTEND_FIELD\" TEXT," + // 13: extendField
                "\"OTHER_FIELD\" TEXT);"); // 14: otherField
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DEPARTMENT_ENTITY\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, DepartmentEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String showId = entity.getShowId();
        if (showId != null) {
            stmt.bindString(2, showId);
        }
 
        String cShowId = entity.getCShowId();
        if (cShowId != null) {
            stmt.bindString(3, cShowId);
        }
 
        String dName = entity.getDName();
        if (dName != null) {
            stmt.bindString(4, dName);
        }
 
        String dLevel = entity.getDLevel();
        if (dLevel != null) {
            stmt.bindString(5, dLevel);
        }
 
        String dParentName = entity.getDParentName();
        if (dParentName != null) {
            stmt.bindString(6, dParentName);
        }
 
        String dParentShowId = entity.getDParentShowId();
        if (dParentShowId != null) {
            stmt.bindString(7, dParentShowId);
        }
 
        String cName = entity.getCName();
        if (cName != null) {
            stmt.bindString(8, cName);
        }
 
        String createUserName = entity.getCreateUserName();
        if (createUserName != null) {
            stmt.bindString(9, createUserName);
        }
 
        Integer dSort = entity.getDSort();
        if (dSort != null) {
            stmt.bindLong(10, dSort);
        }
 
        Integer dAvailableCount = entity.getDAvailableCount();
        if (dAvailableCount != null) {
            stmt.bindLong(11, dAvailableCount);
        }
 
        Integer dUnAvailableCount = entity.getDUnAvailableCount();
        if (dUnAvailableCount != null) {
            stmt.bindLong(12, dUnAvailableCount);
        }
 
        Integer childDeptCount = entity.getChildDeptCount();
        if (childDeptCount != null) {
            stmt.bindLong(13, childDeptCount);
        }
 
        String extendField = entity.getExtendField();
        if (extendField != null) {
            stmt.bindString(14, extendField);
        }
 
        String otherField = entity.getOtherField();
        if (otherField != null) {
            stmt.bindString(15, otherField);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public DepartmentEntity readEntity(Cursor cursor, int offset) {
        DepartmentEntity entity = new DepartmentEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // showId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // cShowId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // dName
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // dLevel
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // dParentName
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // dParentShowId
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // cName
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // createUserName
            cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9), // dSort
            cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10), // dAvailableCount
            cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11), // dUnAvailableCount
            cursor.isNull(offset + 12) ? null : cursor.getInt(offset + 12), // childDeptCount
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // extendField
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14) // otherField
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, DepartmentEntity entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setShowId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setCShowId(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setDName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setDLevel(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setDParentName(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setDParentShowId(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setCName(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setCreateUserName(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setDSort(cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9));
        entity.setDAvailableCount(cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10));
        entity.setDUnAvailableCount(cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11));
        entity.setChildDeptCount(cursor.isNull(offset + 12) ? null : cursor.getInt(offset + 12));
        entity.setExtendField(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setOtherField(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(DepartmentEntity entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(DepartmentEntity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
